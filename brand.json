[
  {
    "question": "What are the different ways to manage a state in a React application?    ",
    "answer": "In modern React, we build our applications with functional components. Components are themselves JavaScript functions, independent and reusable bits of code. The purpose of building the application with components is to have a modular architecture, with a clear separation of concerns. This makes code easier to understand, easier to maintain, and easier to reuse when possible. The state is an object that holds information about a certain component. Plain JavaScript functions don't have the ability to store information. The code within them executes and dissapears once the execution is finished. But thanks to state, React functional components can store information even after execution. When we need a component to store or remember something, or to act in a different way depending on the environment, state is what we need to make it work this way. It's important to mention that not all components in a React app must have state. There are stateless components as well which just render its content without the need to store any information, and that's just fine. Another important thing to mention is that state change is one of the two things that make a React component re-render (the other is a change in props). In this way, the state stores information about the component and also controls its behavior."
  },
  {
    "question": " How does prototypical inheritance work?",
    "answer": "The Prototypal Inheritance is a feature in javascript used to add methods and properties in objects. It is a method by which an object can inherit the properties and methods of another object. Traditionally, in order to get and set the [[Prototype]] of an object, we use Object. getPrototypeOf and Object."
  },
  {
    "question": " What is a unit test? Why should we write unit tests?",
    "answer": "The main objective of unit testing is to isolate written code to test and determine if it works as intended. Unit testing is an important step in the development process, because if done correctly, it can help detect early flaws in code which may be more difficult to find in later testing stages."
  },
  {
    "question": " React vs. Angular vs. Vue?",
    "answer": "Angular: Angular has a steep learning curve, considering it is a complete solution, and mastering Angular requires you to learn associated concepts like TypeScript and MVC. Even though it takes time to learn Angular, the investment pays dividends in terms of understanding how the front end works. React offers a Getting Started guide that should help one set up React in about an hour. The documentation is thorough and complete, with solutions to common issues already present on Stack Overflow. React is not a complete framework and advanced features require the use of third-party libraries. This makes the learning curve of the core framework not so steep but depends on the path you take with additional functionality. However, learning to use React does not necessarily mean that you are using the best practices. Vue provides higher customizability and hence is easier to learn than Angular or React. Further, Vue has an overlap with Angular and React with respect to their functionality like the use of components. Hence, the transition to Vue from either of the two is an easy option. However, simplicity and flexibility of Vue is a double-edged sword â€” it allows poor code, making it difficult to debug and test."
  }
]
